syntax = "proto3";

package asmp.vehicle;

// location description structure for vehicles
message VehiclePosition {
    uint32 road_id = 1;  // road id as set by SUMO
    double s_frac = 2;   // longitudinal position (along the road), as fraction of length
    uint32 lane_id = 4;  // discrete lane id
    double px = 5;       // horizontal cartesian coordinate of vehicle
    double py = 6;       // vertical cartesian coordinate of vehicle
    double angle = 7;    // yaw angle of the vehicle (compass) in degrees (0..359.999, 0 is North)
    double height = 8;   // height in meters above sea level
    double slope = 9;    // slope of the vehicle in driving direction in degrees (pitch)
    double lat = 10;     // latitude of the vehicle (in degrees)
    double lon = 11;     // longitude of the vehicle (in degrees)
    string edge_id = 12;
}

// complete state record of a vehicle
message VehicleState {
    // vehicle indication signals
    enum VehicleSignal {
        NONE = 0;
        BLINKER_RIGHT = 1;
        BLINKER_LEFT = 2;
        BLINKER_EMERGENCY = 4;
        BREAKLIGHT = 8;
        FRONTLIGHT = 16;
        FOGLIGHT = 32;
        HIGHBEAM = 64;
        BACKDRIVE = 128;
        WIPER = 256;
        DOOR_OPEN_LEFT = 512;
        DOOR_OPEN_RIGHT = 1024;
        EMERGENCY_BLUE = 2048;
        EMERGENCY_RED = 4096;
        EMERGENCY_YELLOW = 8192;
    }

    enum VehicleStopState {
        DRIVING = 0;
        STOPPED = 1;
        PARKING = 2;
        TRIGGERED = 4;
        CONTAINER_TRIGGERED = 8;
        AT_BUS_STOP = 16;
        AT_CONTAINER_STOP = 32;
        AT_CHARGING_STATION = 64;
        AT_PARKING_AREA = 128;
    }

    VehiclePosition position = 1;
    double speed_mps = 2;
    repeated VehicleSignal signals = 3;
    uint32 signal_sum = 4;
    repeated VehicleStopState stopstates = 5;
    uint32 stopstate_sum = 6;
}

// registration of a new vehicle
// (Veins asks ASM to register a vehicle)
message RegisterVehicleCommand {
    // macroscopic types of vehicles
    enum VehicleType {
        UNDEFINED = 0;
        PASSENGER_CAR = 1;
        TRUCK = 2;
        BICYCLE = 3;
    }

    uint32 vehicle_id = 1;
    bool is_ego_vehicle = 2;
    VehicleState state = 3;
    VehicleType veh_type = 4;
}

// removal of a known vehicle
// Veins asks ASM to unregister a vehicle
message UnregisterVehicleCommand {
    uint32 vehicle_id = 1;
    bool is_ego_vehicle = 2;
}

// update of known vehicle's state
// (ASM lets Veins know about vehicle's position)
message UpdateVehicleCommand {
    uint32 vehicle_id = 1;
    VehicleState state = 2;
    bool is_ego_vehicle = 3;
}

// wrapper message for vehicles commands
message Command {
    oneof command_oneof {
        RegisterVehicleCommand register_vehicle_command = 100;
        UnregisterVehicleCommand unregister_vehicle_command = 101;
        UpdateVehicleCommand update_vehicle_command = 102;
    }
}

// traffic synchronization update wrapper
// sequence of commands with a common timestamp
message Message {
    double time_s = 1;
    repeated Command commands = 2;
}
